openapi: 3.0.3
info:
  title: Gert Platform API
  version: "1.0.0"
  description: |
    API платформы Gert.pro. Покрывает этапы 1–4: аутентификация, CRUD компаний/сотрудников/шаблонов, модуль опросов «Портрет Талантов».
servers:
  - url: http://localhost:3000
    description: Local backend
tags:
  - name: Auth
  - name: Companies
  - name: Employees
  - name: SurveyTemplates
  - name: SurveyAssignments
  - name: PublicSurvey
  - name: SurveyResults
paths:
  /api/auth/login:
    post:
      tags: [Auth]
      summary: Логин и получение JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        "200":
          description: Успешно
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
  /api/auth/register:
    post:
      tags: [Auth]
      summary: Регистрация (для демо; в проде ограничена)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [company_id, email, password]
              properties:
                company_id: { type: integer }
                email: { type: string }
                password: { type: string }
      responses:
        "201": { description: Создано }
  /api/companies:
    get:
      tags: [Companies]
      summary: Список компаний (admin — все; user — своя)
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: limit
          schema: { type: integer, minimum: 1, maximum: 200 }
        - in: query
          name: offset
          schema: { type: integer, minimum: 0 }
      responses:
        "200":
          description: ОК
    post:
      tags: [Companies]
      summary: Создать компанию (admin)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
                contact_email: { type: string, format: email }
      responses:
        "201": { description: Создано }
  /api/companies/{id}:
    put:
      tags: [Companies]
      summary: Обновить компанию (admin; user — только свою)
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, minimum: 1 }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                contact_email: { type: string, format: email }
                status: { type: string }
      responses:
        "200": { description: ОК }
    delete:
      tags: [Companies]
      summary: Удалить компанию (admin)
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer, minimum: 1 }
      responses:
        "200": { description: ОК }
  /api/companies/{companyId}/employees:
    get:
      tags: [Employees]
      summary: Список сотрудников компании
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: companyId
          required: true
          schema: { type: integer, minimum: 1 }
        - in: query
          name: limit
          schema: { type: integer }
        - in: query
          name: offset
          schema: { type: integer }
      responses:
        "200": { description: ОК }
    post:
      tags: [Employees]
      summary: Создать сотрудника
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: companyId
          required: true
          schema: { type: integer, minimum: 1 }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name: { type: string }
                last_name: { type: string }
                email: { type: string }
                phone: { type: string }
                position: { type: string }
                department: { type: string }
      responses:
        "201": { description: Создано }
  /api/companies/{companyId}/employees/{id}:
    put:
      tags: [Employees]
      summary: Обновить сотрудника (ограничено; см. модель)
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: companyId
          required: true
          schema: { type: integer, minimum: 1 }
        - in: path
          name: id
          required: true
          schema: { type: integer, minimum: 1 }
      responses:
        "200": { description: ОК }
    delete:
      tags: [Employees]
      summary: Удалить сотрудника
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: companyId
          required: true
          schema: { type: integer, minimum: 1 }
        - in: path
          name: id
          required: true
          schema: { type: integer, minimum: 1 }
      responses:
        "200": { description: ОК }
  /api/survey-templates:
    get:
      tags: [SurveyTemplates]
      summary: Список шаблонов
      security: [{ bearerAuth: [] }]
      responses:
        "200": { description: ОК }
    post:
      tags: [SurveyTemplates]
      summary: Создать шаблон (admin)
      security: [{ bearerAuth: [] }]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name: { type: string }
                description: { type: string }
                is_active: { type: boolean }
                version: { type: integer }
      responses:
        "201": { description: Создано }
  /api/survey-templates/{id}:
    put:
      tags: [SurveyTemplates]
      summary: Обновить шаблон (admin)
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                description: { type: string }
                is_active: { type: boolean }
                version: { type: integer }
      responses:
        "200": { description: ОК }
    delete:
      tags: [SurveyTemplates]
      summary: Удалить шаблон (admin)
      security: [{ bearerAuth: [] }]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        "200": { description: ОК }
  /api/survey-assignments:
    post:
      tags: [SurveyAssignments]
      summary: Массовое назначение опросов
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [employee_ids, survey_template_id]
              properties:
                employee_ids:
                  type: array
                  items: { type: integer }
                survey_template_id: { type: integer }
      responses:
        "201":
          description: Назначено
  /api/public/survey/{uniqueLink}:
    get:
      tags: [PublicSurvey]
      summary: Получить статус сессии и таймер
      parameters:
        - in: path
          name: uniqueLink
          required: true
          schema: { type: string }
      responses:
        "200": { description: ОК }
        "410": { description: Сессия истекла }
    post:
      tags: [PublicSurvey]
      summary: Сохранить один ответ (стрим)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [question_id, module, answer_value]
              properties:
                question_id: { type: string }
                module: { type: string, enum: [m1, m2] }
                answer_value: { }
      parameters:
        - in: path
          name: uniqueLink
          required: true
          schema: { type: string }
      responses:
        "201": { description: Сохранено }
        "410": { description: Сессия истекла }
  /api/public/survey/{uniqueLink}/complete:
    post:
      tags: [PublicSurvey]
      summary: Явное завершение модуля
      parameters:
        - in: path
          name: uniqueLink
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [module]
              properties:
                module: { type: string, enum: [m1, m2] }
      responses:
        "200": { description: ОК }
  /api/survey-results:
    get:
      tags: [SurveyResults]
      summary: Получить результаты по назначению
      security: [{ bearerAuth: [] }]
      parameters:
        - in: query
          name: assignment_id
          required: true
          schema: { type: integer }
      responses:
        "200": { description: ОК }
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
