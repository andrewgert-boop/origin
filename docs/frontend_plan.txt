
Этап 1: Система аутентификации и защищенные маршруты

Цель: Реализовать безопасный вход, регистрацию и навигацию в зависимости от роли пользователя.

Сервис для работы с API и HTTP-клиент.
Промпт для DeepSeek:
"Создай файл src/services/api.js. Настрой базовый экземпляр Axios с базовым URL из переменных окружения. Добавь перехватчик запросов (interceptor), который автоматически подставляет JWT токен из localStorage в заголовок Authorization для каждого запроса. Добавь перехватчик ответов, который обрабатывает ошибки 401/403 (например, удаляет токен и перенаправляет на страницу логина)."
Контекст аутентификации и хуки.
Промпт для DeepSeek:
"Создай src/contexts/AuthContext.jsx. Реализуй провайдер аутентификации, который хранит состояние пользователя (user, token, isAuthenticated, role). Реализуй методы для логина, логаута и регистрации, которые делают запросы к соответствующим API-эндпоинтам бекенда и обновляют состояние. Создай кастомный хук useAuth(), который предоставляет доступ к этому контексту."
Компоненты страниц логина и регистрации.
Промпт для DeepSeek:
"Создай src/pages/Login.jsx и src/pages/Register.jsx. Реализуй формы с валидацией с помощью react-hook-form. Форма логина должна отправлять запрос на /api/auth/login, форма регистрации - на /api/auth/register. При успешном ответе сохраняй JWT токен в localStorage и обновляй состояние в AuthContext. В случае ошибки показывай уведомление с помощью react-hot-toast."
Компонент ProtectedRoute.
Промпт для DeepSeek:
"Создай компонент ProtectedRoute в src/components/ProtectedRoute.jsx. Он должен принимать пропс requiredRole (например, 'admin', 'user'). Компонент должен проверять наличие токена и роль пользователя из AuthContext. Если пользователь не аутентифицирован - перенаправлять на страницу логина. Если его роль не соответствует requiredRole - показывать страницу с ошибкой 403 (Forbidden)."
Этап 2: Кабинет администратора (Полный CRUD и аналитика)

Цель: Реализовать весь функционал, необходимый администратору для управления платформой.

Layout кабинета администратора.
Промпт для DeepSeek:
"Создай src/components/layout/AdminLayout.jsx. Это должен быть макет с боковой панелью (sidebar) с навигацией: 'Дашборд', 'Компании', 'Пользователи', 'Результаты опросов'. Контент должен отображаться в основной области. Используй ProtectedRoute с requiredRole='admin' для этого layout."
Страница управления компаниями (CRUD).
Промпт для DeepSeek:
"Создай src/pages/admin/Companies.jsx. Реализуй интерфейс для просмотра таблицы со списком всех компаний, их контактными данными и статистикой. Добавь кнопки для создания, редактирования и удаления компаний. Для форм создания/редактирования используй модальные окна. Все операции должны выполняться через API (/api/companies)."
Дашборд и страница агрегированной аналитики.
Промпт для DeepSeek:
"Создай src/pages/admin/Dashboard.jsx. Реализуй дашборд с ключевыми метриками: общее количество компаний, пользователей, завершенных опросов. Используй библиотеку recharts для построения графиков (например, график активности по дням). Создай src/pages/admin/SurveyAnalytics.jsx с расширенной аналитикой и фильтрами по компаниям и датам."
Этап 3: Кабинет пользователя (Управление сотрудниками и опросами)

Цель: Дать возможность клиенту управлять своими сотрудниками и назначать опросы.

Layout кабинета пользователя.
Промпт для DeepSeek:
"Создай src/components/layout/UserLayout.jsx. Аналогично AdminLayout, но с навигацией: 'Моя компания', 'Сотрудники', 'Назначить опрос', 'Результаты'. Защити его ProtectedRoute с requiredRole='user'."
Страница управления сотрудниками.
Промпт для DeepSeek:
"Создай src/pages/user/Employees.jsx. Реализуй CRUD интерфейс для управления сотрудниками компании текущего пользователя. Должна быть возможность загрузки списка сотрудников из CSV файла (массовое создание). Все запросы должны идти на /api/companies/:companyId/employees."
Страница назначения опросов.
Промпт для DeepSeek:
"Создай src/pages/user/AssignSurvey.jsx. Реализуй форму, где можно выбрать сотрудников (через мультиселект или таблицу с checkbox) и назначить им опрос. При отправке формы должен отправляться запрос на POST /api/assign-survey. После успешного назначения покажи уведомление и сгенерируй уникальные ссылки для каждого сотрудника."
Этап 4: Модуль опроса респондента ("Портрет Талантов")

Цель: Предоставить респонденту интуитивный интерфейс для прохождения опроса.

Страница прохождения опроса.
Промпт для DeepSeek:
"Создай src/pages/survey/SurveyPage.jsx. Это публичная страница, доступная по уникальной ссылке без авторизации. Компонент должен при монтировании делать запрос на GET /api/public/survey/:uniqueLink для получения вопросов. Реализуй интерфейс пошагового прохождения опроса (один вопрос на экран) или с возможностью прокрутки. Используй индикатор прогресса. Предусмотри валидацию ответов."
Отправка ответов и завершение опроса.
Промпт для DeepSeek:
"В SurveyPage добавь кнопку отправки всех ответов. При нажатии должен отправляться POST запрос на /api/public/survey/:uniqueLink с массивом ответов. После успешной отправки покажи экран благодарности. Обработай возможные ошибки (например, если ссылка недействительна или опрос уже завершен)."
Этап 5: Система отчетности и финальные доработки

Цель: Реализовать просмотр и генерацию отчетов для администратора и пользователя.

Просмотр и скачивание отчетов.
Промпт для DeepSeek:
"Создай src/pages/user/Reports.jsx и src/pages/admin/Reports.jsx. Реализуй интерфейс для просмотра списка доступных отчетов (с фильтрами). Добавь кнопку 'Сгенерировать PDF', которая делает запрос на GET /api/companies/:companyId/report?format=pdf и скачивает полученный файл. Для предпросмотра отчета можно использовать компонент iframe."
Глобальная обработка ошибок и загрузки.
Промпт для DeepSeek:
"Создай компонент src/components/ErrorBoundary.jsx для отлова непредвиденных ошибок в компонентах. Реализуй глобальный индикатор загрузки для всех API-запросов (можно с помощью перехватчиков Axios и состояния в React Context). Добавь страницы для ошибок 404 (Not Found) и 403 (Forbidden)."
Рефакторинг и оптимизация.
Промпт для DeepSeek:
"Проведи рефакторинг кода: убери неиспользуемые импорты, разбей большие компоненты на более мелкие, используй React.memo и useCallback для оптимизации перерисовок. Проверь приложение на доступность (a11y): семантическая верстка, aria-атрибуты, управление с клавиатуры. Настрой билд для продакшена (vite build)."