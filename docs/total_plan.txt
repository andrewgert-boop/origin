Этап 0: Подготовка инфраструктуры и начальная настройка

Инициализация проектов и настройка окружения
Создание монорепозитория с папками backend, frontend, docs
Настройка полного CI/CD pipeline с тестированием и линтингом
Конфигурация Docker и docker-compose для разработки
Промпт для DeepSeek:

plaintext
Создай монорепозиторий с следующей структурой и настройкой:
gert-platform/
├── backend/
│ ├── Dockerfile
│ ├── package.json
│ └── src/
├── frontend/
│ ├── Dockerfile
│ ├── package.json
│ └── src/
├── docs/
│ ├── api/
│ └── deployment/
├── docker-compose.yml
├── .github/
│ └── workflows/
│ ├── ci-backend.yml
│ ├── ci-frontend.yml
│ └── cd-production.yml
└── README.md

Настрой package.json для backend с зависимостями: express, cors, helmet, bcryptjs, jsonwebtoken, express-validator, pg, winston, dotenv, jest, supertest.
Настрой package.json для frontend с зависимостями: react, react-router-dom, axios, react-hook-form, react-query, react-hot-toast, lucide-react, tailwindcss, @headlessui/react, recharts, jest, testing-library.
Создай docker-compose.yml с сервисами: postgres, backend, frontend, redis.
Настрой GitHub Actions workflows для автоматического тестирования и деплоя.

text

---

#### **Этап 1: Безопасная базовая архитектура Backend**

2. **Реализация ядра приложения с безопасностью**
   - Настройка Express с security middleware
   - Реализация JWT аутентификации
   - Система ролевой авторизации (RBAC)
   - Валидация и санитизация всех входных данных

**Промпт для DeepSeek:**
```plaintext
Создай безопасное Express.js приложение с полной аутентификацией и авторизацией:

1. Настрой основные middleware: helmet, cors, rate limiting, express.json
2. Реализуй полную систему JWT аутентификации:
   - Эндпоинты /api/auth/login и /api/auth/register
   - Валидация входных данных с express-validator
   - Хеширование паролей с bcryptjs (12 раундов)
   - Проверка токенов с помощью middleware authenticateToken
3. Реализуй ролевую модель (admin, user, employee) с middleware checkRole
4. Создай единый обработчик ошибок с логированием через winston
5. Настрой подключение к PostgreSQL с пулом соединений

Предоставь полный код с организацией по папкам: middleware, controllers, routes, utils.
Этап 2: Реализация основных сущностей системы

Модели данных и базовый CRUD
Модели User, Company, Employee, SurveyTemplate
API для управления компаниями и сотрудниками
Валидация и обработка ошибок
Промпт для DeepSeek:

plaintext
Реализуй основные модели данных и CRUD API согласно ТЗ:

1. Модель Company с полями: id, name, contact_email, status, created_at
2. Модель User с полями: id, company_id, email, password_hash, role, status
3. Модель Employee с полями: id, company_id, first_name, last_name, email, position, department
4. Модель SurveyTemplate с полями: id, name, description, is_active, version

Создай полные CRUD операции для:
- GET/POST/PUT/DELETE /api/companies
- GET/POST/PUT/DELETE /api/companies/:companyId/employees
- GET/POST/PUT/DELETE /api/survey-templates

Добавь пагинацию, сортировку и фильтрацию для всех списковых endpoint'ов.
Реализуй проверку прав доступа чтобы пользователи могли access только свои данные.
Этап 3: Система динамического шифрования данных

Реализация криптографической подсистемы
Генерация ключей на основе SHA256 + названия компании
Шифрование чувствительных данных в БД
Система управления ключами
Промпт для DeepSeek:

plaintext
Реализуй систему динамического шифрования данных:

1. Создай службу encryption.service.js с методами:
   - generateKey(companyName, masterSecret) - генерация ключа на основе SHA256(companyName + masterSecret + salt)
   - encryptData(data, key) - шифрование данных с использованием AES-256-GCM
   - decryptData(encryptedData, key) - расшифровка данных
   
2. Интегрируй шифрование в модели данных через хуки:
   - beforeSave - автоматическое шифрование чувствительных полей
   - afterFind - автоматическая расшифровка
   
3. Реализуй безопасное хранение master secret с использованием переменных окружения и ротацию ключей.

4. Зашифруй следующие поля:
   - User: email, phone
   - Employee: first_name, last_name, email, phone, position, department
   - SurveyResults: все персональные данные

Предоставь полную реализацию с обработкой ошибок и тестами.
Этап 4: Модуль опросов "Портрет Талантов"

Интеграция системы опросов
Назначение опросов сотрудникам
Генерация уникальных ссылок
Прохождение опросов
Обработка результатов
Промпт для DeepSeek:

plaintext
Реализуй полную систему опросов согласно ТЗ:

1. Модель SurveyAssignment с полями: id, employee_id, survey_template_id, status, unique_link, assigned_at, completed_at
2. Модель SurveyResponse с полями: id, survey_assignment_id, question_id, answer_value, responded_at
3. Модель SurveyResult с полями: id, survey_assignment_id, parameter_name, raw_score, standardized_score, interpretation_text

Создай API эндпоинты:
- POST /api/survey-assignments - массовое назначение опросов
- GET /api/public/survey/:uniqueLink - получение опроса по ссылке
- POST /api/public/survey/:uniqueLink - отправка ответов
- GET /api/survey-results - получение результатов

Реализуй интеграцию с Python-микросервисом для анализа результатов через HTTP API.
Добавь автоматическую отправку уведомлений о назначении опросов.
Этап 5: Базовая реализация Frontend

React приложение с базовой структурой
Настройка routing и state management
Компоненты аутентификации
Защищенные маршруты
Промпт для DeepSeek:

plaintext
Создай React приложение с следующей структурой:

1. Настрой Vite + React + TypeScript + Tailwind CSS
2. Реализуй routing с React Router v6 с защищенными маршрутами
3. Создай контекст аутентификации (AuthContext) с методами login, logout, register
4. Реализуй страницы:
   - /login - форма входа с валидацией
   - /register - форма регистрации с полной валидацией по ТЗ
   - /dashboard - заглушка дашборда

5. Настрой axios interceptors для:
   - Автоматического добавления JWT токена к запросам
   - Обработки ошибок и перенаправления на login при 401
   
6. Создай базовые UI компоненты: Button, Input, Modal, Loader с использованием Tailwind CSS.

Предоставь полный код с TypeScript типами.
Этап 6: Кабинет администратора

Полный функционал для администраторов
Управление компаниями и пользователями
Просмотр аналитики и отчетов
Система мониторинга
Промпт для DeepSeek:

plaintext
Реализуй полный кабинет администратора:

1. Страница /admin/dashboard с:
   - Ключевыми метриками: количество компаний, пользователей, опросов
   - Графиками активности (recharts)
   - Последними событиями в системе

2. Страница /admin/companies с:
   - Таблицей компаний с сортировкой и фильтрацией
   - Модальными окнами создания/редактирования
   - Mass operations (активация, деактивация)

3. Страница /admin/users с управлением пользователями
4. Страница /admin/analytics с расширенной аналитикой
5. Страница /admin/audit-logs с журналом событий

Используй React Table для таблиц, React Hook Form для форм, и React Query для управления состоянием.
Реализуй полную валидацию всех форм согласно требованиям ТЗ.
Этап 7: Кабинет пользователя (клиента)

Функционал для клиентов платформы
Управление сотрудниками
Назначение опросов
Просмотр результатов
Промпт для DeepSeek:

plaintext
Реализуй кабинет пользователя (клиента):

1. Страница /user/dashboard с метриками компании
2. Страница /user/employees с:
   - CRUD операциями над сотрудниками
   - Mass import из CSV (с валидацией и preview)
   - Экспортом данных
   
3. Страница /user/assign-survey с:
   - Многошаговой формой назначения опросов
   - Выбором сотрудников (multi-select с поиском)
   - Настройкой параметров опроса
   
4. Страница /user/results с:
   - Таблицей результатов
   - Детальными отчетами по сотрудникам
   - Визуализацией данных (графики, диаграммы)

Реализуй все формы с валидацией согласно бизнес-правилам из ТЗ.
Этап 8: Система отчетности и аналитики

Генерация отчетов и аналитика
PDF отчеты
Визуализация данных
Сравнительная аналитика
Пromпт для DeepSeek:

plaintext
Реализуй систему отчетности:

1. Сервис генерации PDF отчетов на backend с использованием pdfkit
2. API endpoint /api/reports/generate для создания отчетов
3. Frontend компоненты для:
   - Просмотра отчетов в браузере
   - Настройки параметров отчетов
   - Сравнительного анализа результатов
   
4. Различные типы отчетов:
   - Индивидуальные отчеты по сотрудникам
   - Сводные отчеты по отделам/компании
   - Трендовые отчеты за период времени

Реализуй визуализацию с использованием recharts и react-chartjs-2.
Добавь возможность кастомизации отчетов под бренд компании.
Этап 9: Интеграции и расширения

API и системные интеграции
RESTful API для интеграций
Webhooks система
OAuth 2.0 авторизация
Промпт для DeepSeek:

plaintext
Реализуй систему интеграций:

1. RESTful API с документацией (OpenAPI 3.0)
2. Систему webhooks для событий:
   - survey.assigned
   - survey.completed
   - report.generated
   
3. OAuth 2.0 провайдер для авторизации внешних приложений
4. GraphQL endpoint для сложных запросов данных
5. Интерфейс управления интеграциями в админке

Создай полную документацию API с примерами запросов на нескольких языках.
Этап 10: Тестирование и оптимизация

Полное тестовое покрытие
Unit и интеграционные тесты
E2E тестирование
Нагрузочное тестирование
Промпт для DeepSeek:

plaintext
Реализуй полное тестовое покрытие:

1. Напиши unit tests для всех сервисов и утилит (Jest)
2. Реализуй интеграционные тесты для API endpoints (Supertest)
3. Настрой E2E тестирование с Playwright/Cypress
4. Проведи нагрузочное тестирование с k6
5. Настрой мониторинг покрытия тестами

Добавь тесты для:
- Всех моделей и контроллеров backend
- Всех компонентов и страниц frontend
- Критических пользовательских сценариев
- Edge cases и обработки ошибок
Этап 11: Деплой и мониторинг

Продакшен развертывание
Docker-контейнеризация
Orchestration с Kubernetes
Мониторинг и логирование
Промпт для DeepSeek:

plaintext
Подготови приложение к продакшен развертыванию:

1. Оптимизированные Dockerfile для backend и frontend
2. Kubernetes manifests для развертывания в кластере
3. Настройка мониторинга с Prometheus/Grafana
4. Централизованное логирование с ELK stack
5. Настройка алертинга для критических ошибок

Настрой CI/CD пайплайн для автоматического деплоя в продакшен.
Реализуй blue-green deployments для минимизации downtime.
Настрой мониторинг производительности и доступности.
Этап 12: Документация и финальная полировка

Полная документация
Руководство пользователя
Техническая документация
API документация
Промпт для DeepSeek:

plaintext
Создай полную документацию:

1. Руководство пользователя с скриншотами и видео
2. Техническая документация по архитектуре и API
3. Документация по развертыванию и поддержке
4. Troubleshooting guide и FAQ
5. Интерактивная API документация (Swagger/Redoc)

Реализуй систему feedback и сбора предложений от пользователей.
Проведи финальный security audit и penetration testing.
Подготовь материалы для онбординга новых разработчиков.
Этот план покрывает все аспекты разработки коммерческого продукта - от начальной настройки до финального развертывания и поддержки. Каждый этап содержит конкретные промпты для выполнения с помощью DeepSeek, обеспечивая полное соответствие требованиям ТЗ и готовность к промышленной эксплуатации.